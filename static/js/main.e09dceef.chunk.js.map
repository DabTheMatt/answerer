{"version":3,"sources":["styles.js","components/Globals/Section.js","components/Globals/Arrow.js","components/Home/Home.js","components/Globals/GlobalStyles.js","App.js","reportWebVitals.js","index.js"],"names":["setColor","setFlex","align","justify","setRem","size","Section","styled","div","props","color","Arrow","HomeWrapper","TitleWrapper","h1","SectionWrapper","MapFilterWrapper","Home","href","id","target","className","Globals","createGlobalStyle","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e09dceef.chunk.js","sourcesContent":["import {css} from \"styled-components\";\n\nexport const setColor = {\n    dark: \"#003049\",\n    darker: \"#dbcc80\",\n    light: \"#eae2b7\",\n    lighten: \"#f6f2df\",\n    yellow: \"#eae2b7\",\n    orange: \"#f77f00\",\n    red: \"#d62828\"\n}\n\nexport const setFlex = ({align=\"center\", justify=\"center\"}={}) =>{\n    return`display:flex; align-items:${align}; justify-content:${justify}`\n}\n\nexport const setRem = (size = 16) => {\n    return`${size/16}rem`\n}","import styled from \"styled-components\";\nimport { setRem } from \"../../styles\";\n\nconst Section = styled.div`\npadding: ${setRem(32)};\nbackground: ${props => props.color};\nheight: 100%;\nwidth: 100%;\n`;\n\nexport default Section;","import styled from \"styled-components\";\nimport { setRem, setFlex, setColor} from \"../../styles\";\n\nconst Arrow = styled.div`\n  \n  border: solid ${props => props.color};\n  border-width: 0 5px 5px 0;\n\n  display: inline-block;\n  padding: 30px;\n  transform: rotate(45deg);\n  animation: blinking 2.5s ease-in-out infinite;\n  \n    \n  @keyframes blinking {\n    50% {\n      opacity: 0;\n    }\n  }\n  &:hover {\n    border: solid ${setColor.red};\n    border-width: 0 5px 5px 0;\n    animation: paused;\n  }\n  &:active {\n      \n  }\n`;\n\nexport default Arrow;","import React from \"react\";\nimport styled from \"styled-components\";\nimport { setColor, setFlex, setRem } from \"../../styles\";\nimport Section from \"../Globals/Section\";\nimport Arrow from \"../Globals/Arrow\";\nimport jsxToString from \"jsx-to-string\";\n\nconst Home = () => {\n  return (\n    <div>\n      <HomeWrapper>\n        <TitleWrapper>find the answer</TitleWrapper>\n        <a href=\"#mapFilter\">\n          <Arrow color={setColor.light} />\n        </a>\n      </HomeWrapper>\n      <SectionWrapper>\n        <Section id=\"mapFilter\">\n          <MapFilterWrapper>\n            <h1>Map / Filter Methods Mystery</h1>\n            <h2>Array.prototype.map()</h2>\n            <p>\n              The <span>map() method</span> creates a new array populated with\n              the results of calling a provided function on every element in the\n              calling array.\n            </p>\n            <code>\n              const array1 = [1, 4, 9, 16]; <br />\n              const map1 = array1.map(x => x * 2); <br />\n              console.log(map1);\n              <br />\n              <br />\n              Output:\n              <br />\n              Array [2, 8, 18, 32]\n            </code>\n            <p>\n              <span>map</span> calls a provided callbackFn function once for\n              each element in an array, in order, and constructs a new array\n              from the results. callbackFn is invoked only for indexes of the\n              array which have assigned values (including undefined).\n            </p>\n            <p>It is not called for missing elements of the array; that is:</p>\n\n            <ul>\n              <li>indexes that have never been set;</li>\n              <li>indexes which have been deleted.</li>\n            </ul>\n            <p>\n              Since <span>map</span> builds a new array, using it when you\n              aren't using the returned array is an anti-pattern; use forEach or\n              for...of instead.\n            </p>\n            <p>\n              You shouldn't be using <span>map</span> if:\n            </p>\n            <ul>\n              <li>you're not using the array it returns; and/or</li>\n              <li>you're not returning a value from the callback.</li>\n            </ul>\n            <a href=\"#mapFilter2\">\n              <Arrow color={setColor.dark} />\n            </a>\n          </MapFilterWrapper>\n        </Section>\n      </SectionWrapper>\n      <SectionWrapper>\n        <Section id=\"mapFilter2\" color=\"#e4d9a0\">\n          <MapFilterWrapper>\n            <h2>Array.prototype.filter()</h2>\n            <p>\n              The filter() method creates a new array with all elements that\n              pass the test implemented by the provided function.\n            </p>\n            <code>\n              const words = ['spray', 'limit', 'elite', 'exuberant',\n              'destruction', 'present'];\n              <br />\n              const result = words.filter(word => word.length > 6);\n              <br />\n              console.log(result);\n              <br />\n              <br />\n              Output:\n              <br />\n              Array [\"exuberant\", \"destruction\", \"present\"]\n            </code>\n            <p>\n              filter() calls a provided callbackFn function once for each\n              element in an array, and constructs a new array of all the values\n              for which callbackFn returns a value that coerces to true.\n              callbackFn is invoked only for indexes of the array which have\n              assigned values; it is not invoked for indexes which have been\n              deleted or which have never been assigned values. Array elements\n              which do not pass the callbackFn test are skipped, and are not\n              included in the new array.\n            </p>\n            <p>callbackFn is invoked with three arguments:</p>\n            <ul>\n              <li>the value of the element</li>\n              <li>the index of the element</li>\n              <li>the Array object being traversed</li>\n            </ul>\n            <p>\n              If a thisArg parameter is provided to filter, it will be used as\n              the callback's this value. Otherwise, the value undefined will be\n              used as its this value. The this value ultimately observable by\n              callback is determined according to the usual rules for\n              determining the this seen by a function.\n            </p>\n            <p>filter() does not mutate the array on which it is called.</p>\n            <p>\n              The range of elements processed by filter() is set before the\n              first invocation of callbackFn. Elements which are appended to the\n              array (from callbackFn) after the call to filter() begins will not\n              be visited by callbackFn. If existing elements of the array are\n              deleted in the same way they will not be visited.\n            </p>\n            <a href=\"#mapFilter3\">\n              <Arrow color={setColor.dark} />\n            </a>\n          </MapFilterWrapper>\n        </Section>\n      </SectionWrapper>\n      <SectionWrapper>\n        <Section id=\"mapFilter3\" color=\"#dbcc80\">\n          <MapFilterWrapper>\n            <h2>Array.prototype.filter() example</h2>\n            <p>\n              Snippet from Matt-s-Motivator:{\" \"}\n              <a\n                href=\"https://github.com/DabTheMatt/Matt-s-Motivator/blob/master/src/App3.js\"\n                target=\"_blank\"\n              >\n                src/App3.js (line: 115)\n              </a>\n            </p>\n            <code>\n              <div>delTask = (id) => &#123;</div>\n              <div>\n                {\" \"}\n                const delActivities = this.state.tasks.filter((task) => id !==\n                task.id);\n              </div>\n              <div>\n                this.setState&#40;&#123;tasks:\n                &#91;...delActivities&#93;&#125;&#41;&#59;\n              </div>\n              <div>&#125;&#59;</div>\n            </code>\n            <h3>explanation in my words</h3>\n            <p>\n              The <span>delTask</span> ​​function creates a new array based on\n              the <span>tasks</span> array stored in the component state. The{\" \"}\n              <span>delActivities</span> table will contain all the elements\n              that will pass the test of the filter method (whose id will be\n              different from the id passed to the function).Then this.setState\n              will overwrite the <span>tasks</span> array.\n            </p>\n            <Arrow color={setColor.dark} />\n          </MapFilterWrapper>\n        </Section>\n      </SectionWrapper>\n      <SectionWrapper>\n        <Section id=\"mapFilter4\" color=\"#d2bf60\">\n          <MapFilterWrapper>\n            <h2>Array.prototype.map() example</h2>\n            <p>\n              Snippet from Matt-s-Motivator:{\" \"}\n              <a\n                href=\"https://github.com/DabTheMatt/Matt-s-Motivator/blob/master/src/App3.js\"\n                target=\"_blank\"\n              >\n                src/App3.js (line: 174)\n              </a>\n            </p>\n            <code>\n              <div>const taskList = this.state.tasks.map((task) => &#40;</div>\n              <div>&#60;Tab</div>\n              <div> id=&#123;task.id&#125;</div>\n              <div>...</div>\n              <div>/&#62;</div>\n              <div>&#41;&#41;&#59;</div>\n            </code>\n            <h3>explanation in my words</h3>\n            <p>\n              Using the <span>map</span> method, I create the{\" \"}\n              <span>taskList</span> array. Iterating through the array, I create\n              a new component <span>Tab</span> for each <span>task</span>{\" \"}\n              element by sending to it needed props.\n            </p>\n            <p>\n              <span>Map</span> method is usually used to return an array in\n              which all the elements have been subjected to a given function.\n            </p>\n            <p>In this case, I think I need a better example :)</p>\n            <p>\n              The <span>Filter</span> method filters the provided array and returns a new\n              array containing only elements that match the specified criteria.\n            </p>\n\n            <p>\n              <span>Map</span> method returns a new array containing all elements that have\n              been subjected to the attached function.\n            </p>\n            <p>\n              I conclude that the <span>map</span> method is much more flexible because it\n              allows you to create filters when the <span>Filter</span> method won't let you\n              (for example) multiply every element of the array by 2 :)\n            </p>\n            <Arrow color={setColor.dark} />\n          </MapFilterWrapper>\n        </Section>\n      </SectionWrapper>\n      <SectionWrapper>\n        <Section id=\"mapFilter4\" color=\"#003049\">\n          <MapFilterWrapper>\n              <div className=\"lightText\">\n                  <div></div>\n            <h1>why do you need a copy?</h1>\n            \n            \n            </div>\n            <Arrow color={setColor.dark} />\n          </MapFilterWrapper>\n        </Section>\n      </SectionWrapper>\n    </div>\n  );\n};\n\nconst HomeWrapper = styled.div`\n  background: ${setColor.dark};\n  color: ${setColor.light};\n  height: 100vh;\n  ${setFlex()};\n  flex-direction: column;\n  a {\n    margin: 30px;\n  }\n  \n  \n`;\n\nconst TitleWrapper = styled.h1`\n  font-size: ${setRem(64)};\n  font-weight: 100;\n`;\n\nconst SectionWrapper = styled.div`\n  height: auto;\n  ${setFlex()};\n  flex-direction: column;\n  \n      \n  \n      .lightText {\n      color: ${setColor.light}\n  }\n  \n`;\n\nconst MapFilterWrapper = styled.div`\n  ${setFlex()};\n  flex-direction: column;\n  width: 80%;\n  margin: 0 auto;\n  height: 100%;\n\n  code {\n    width: 100%;\n    font-size: ${setRem(20)};\n    margin: 0 auto;\n    margin-bottom: ${setRem(32)};\n    padding: ${setRem(16)};\n    background: ${setColor.lighten};\n    color: ${setColor.dark};\n  }\n  ul {\n    margin-bottom: ${setRem(32)};\n  }\n\n  span {\n    font-weight: 900;\n  }\n`;\n\nexport default Home;\n","import {createGlobalStyle} from \"styled-components\";\nimport {setColor} from \"../../styles\";\n\nconst Globals = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Lato:ital,wght@1,100;1,300;1,400;1,700;1,900&family=Roboto:wght@100;300;400;500;700;900&display=swap');\n\n*{\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    scroll-behavior: smooth;\n}\nbody{\n    font-size: 100%;\n    color: ${setColor.dark};\n    background: ${setColor.light};\n    font-family: 'Roboto', sans-serif;\n    \n}\nh1{\n    font-size: 3em;\n    line-height: 1.2;\n    margin-bottom:0.5em;\n}\nh2{\n    font-size: 2em;\n    margin-bottom:0.75em;\n}\nh3{\n    font-size: 1.5em;\n    line-height: 1;\n    margin-bottom: 1em;\n}\nh4{\n    font-size: 1.2em;\n    font-weight: bold;\n    line-height: 1.2;\n    margin-bottom:1.25em;\n}\nh5{\n    font-size: 1em;\n    font-weight: bold;\n    margin-bottom:1.5em;\n}\nh6{\n    font-size: 1em;\n    font-weight: bold;\n}\np{\n    line-height: 1.5;\n    margin: 0 0 1.5rem 0;\n}\n`;\n\nexport default Globals;","import React from \"react\";\nimport Home from \"./components/Home/Home\";\nimport Globals from \"./components/Globals/GlobalStyles\";\n\nfunction App() {\n  return (\n   <>\n     \n     <Globals />\n     <Home />\n   </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}